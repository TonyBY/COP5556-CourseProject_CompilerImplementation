/**
 * Code developed for the class project in COP5556 Programming Language Principles
 * at the University of Florida, Fall 2020.
 *
 * This software is solely for the educational benefit of students
 * enrolled in the course during the Fall 2020 semester.
 *
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 *
 *  @Beverly A. Sanders, 2020
 *
 */

package cop5556fa20;

import cop5556fa20.AST.Program;
import cop5556fa20.CodeGenUtils.DynamicClassLoader;
import cop5556fa20.resources.ImageResources;
import cop5556fa20.runtime.BufferedImageUtils;
import cop5556fa20.runtime.LoggedIO;
import cop5556fa20.runtime.PLPImage;
import cop5556fa20.runtime.PLPImage.PLPImageException;
import cop5556fa20.runtime.PixelOps;
import org.junit.jupiter.api.Test;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;

import static cop5556fa20.runtime.BufferedImageUtils.resizeBufferedImage;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

class CodeGenTest {

    static boolean doPrint = false;
    static void show(Object s) {
        if (doPrint) {
            System.out.println(s);
        }
    }


    static boolean doKeepFrames = false;
    static void keepFrames() throws IOException {
        if (doKeepFrames) {
            System.out.println("enter any char to close frames and exit");
            int b = System.in.read();
        }
    }

    static boolean writeClassFile = true;

    /**
     * Generates and returns byte[] containing classfile implementing given input program.
     *
     * Throws exceptions for Lexical, Syntax, and Type checking errors
     *
     * @param input   		String containing source code
     * @param className		className and fileName of generated code
     * @return        		Generated bytecode
     * @throws Exception
     */
    byte[] genCode(String input, String className, boolean doCreateFile) throws Exception {
        show(input);
        //scan, parse, and type check
        Scanner scanner = new Scanner(input);

        scanner.scan();
        Parser parser = new Parser(scanner);
        Program program = parser.parse();
        TypeCheckVisitor v = new TypeCheckVisitor();
        program.visit(v, className);
        show(program);

        //generate code
        CodeGenVisitorComplete cv = new CodeGenVisitorComplete(className);
        byte[] bytecode = (byte[]) program.visit(cv, null);
        //output the generated bytecode
        show(CodeGenUtils.bytecodeToString(bytecode));

        //write byte code to file
        if (doCreateFile) {
            String classFileName = ImageResources.binDir + File.separator + className + ".class";
            OutputStream output = new FileOutputStream(classFileName);
            output.write(bytecode);
            output.close();
            System.out.println("wrote classfile to " + classFileName);
        }

        //return generated classfile as byte array
        return bytecode;
    }

    /**
     * Dynamically loads and executes the main method defined in the provided bytecode.
     * If there are no command line arguments, commandLineArgs should be an empty string(i.e., String[0]) (not null).
     *
     * @param className
     * @param bytecode
     * @param commandLineArgs
     * @throws Exception
     */
    void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
        LoggedIO.clearGlobalLog(); //initialize log used for testing.
        PLPImage.clearGlobalLog();
        PixelOps.clearGlobalLog();
        DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
        Class<?> testClass = loader.define(className, bytecode);
        @SuppressWarnings("rawtypes")
        Class[] argTypes = {commandLineArgs.getClass()};
        Method m = testClass.getMethod("main", argTypes );
        show("Command line args: " + Arrays.toString(commandLineArgs));
        show("Output from " + m + ":");  //print name of method to be executed
        Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
        try {
            m.invoke(null, passedArgs);
        }
        catch (Exception e) {
            Throwable cause = e.getCause();
            if (cause instanceof Exception) {
                Exception ec = (Exception) e.getCause();
                throw ec;
            }
            throw  e;
        }
    }


    String getInputFromFile(String fileName) throws IOException {
        Path path = Path.of(fileName);
        return Files.readString(path);
    }

    void genRun(String input, String[] args) throws Exception {
        String classname = name(2);
        byte[] bytecode = genCode(input, classname, writeClassFile);
        runCode(classname, bytecode, args);
    }

    void genRun(String input) throws Exception {
        String classname = name(2);
        byte[] bytecode = genCode(input, classname, writeClassFile);
        runCode(classname, bytecode, new String[0]);
    }



    // returns name of method enclosing this one.
    String name() {
        String nameofCurrMethod = new Throwable().getStackTrace()[1].getMethodName();
        return nameofCurrMethod;
    }


    // nesting = 0 is method name, 1 is caller, 2 is caller of caller, etc.
    String name(int nesting) {
        String nameofCurrMethod = new Throwable().getStackTrace()[nesting].getMethodName();
        return nameofCurrMethod;
    }

    static final int Z=255;
    static final int WHITE = 0xffffffff;
    static final int SILVER = 0xffc0c0c0;
    static final int GRAY=0xff808080;
    static final int BLACK= 0xff000000;
    static final int RED= 0xffff0000;
    static final int MAROON= 0xff800000;
    static final int YELLOW= 0xffffff00;
    static final int OLIVE= 0xff808000;
    static final int LIME= 0xff00ff00;
    static final int GREEN= 0xff008000;
    static final int AQUA= 0xff00ffff;
    static final int TEAL= 0xff008080;
    static final int BLUE= 0xff0000ff;
    static final int NAVY= 0xff000080;
    static final int FUCHSIA= 0xffff00ff;
    static final int PURPLE= 0xff800080;

    /***********************************************************************/

    @Test
    public void loadImage0a() throws Exception {
        String input = """
				image a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        PLPImage a = new PLPImage(BufferedImageUtils.fetchBufferedImage(args[0]),null);
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage0a_file() throws Exception {
        String input = """
				image a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.fileImage0};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        PLPImage a = new PLPImage(BufferedImageUtils.fetchBufferedImage(args[0]),null);
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_two_dec() throws Exception {
        String input = """
				image a <- @0;
				image b <- a;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        PLPImage a = new PLPImage(BufferedImageUtils.fetchBufferedImage(args[0]),null);
        expectedLog.add(a);
        show("a: " + a);
        show("LoggedIO.globalLog: " + LoggedIO.globalLog);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_EQ_url() throws Exception {
        String input = """
				image a <- @0;
				image b = a;
				b -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        PLPImage b = new PLPImage(BufferedImageUtils.fetchBufferedImage(args[0]),null);
        expectedLog.add(b);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_size_url() throws Exception {
        String input = """
				image[400,500] a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(a);
        show("a: " + a);
        show("LoggedIO.globalLog: " + LoggedIO.globalLog);
        keepFrames();
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void loadImage_url_two_dec_resize_LARROW_image() throws Exception {
        String input = """
				image a <- @0;
				image[400, 500] b <- a;
				b -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage b = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(b);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_two_dec_resize_EQ_fail() throws Exception {
        String input = """
				image a <- @0;
				image[400, 500] b = a;
				b -> screen;
				""";
        Exception exception = assertThrows(PLPImageException.class, () -> {
            String[] args = {ImageResources.fileImage0};
            genRun(input,args);
        });
        show(exception);
        keepFrames();
    }

    @Test
    public void loadImage_url_two_dec_resize_EQ_pass() throws Exception {
        String input = """
				image [400, 500] a <- @0;
				image[400, 500] b = a;
				b -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage b = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(b);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_Assign() throws Exception {
        String input = """
				image a <- @0;
				image b;
				b = a;
				b -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
//		BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage b = new PLPImage(fetchedBufferedImage, null);
        expectedLog.add(b);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_Assign_size_pass() throws Exception {
        String input = """
				image [400, 500] a <- @0;
				image [400, 500] b;
				b = a;
				b -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage b = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(b);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_size_file() throws Exception {
        String input = """
				image[400, 500] a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.fileImage0};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        show("a.declaredSize: " + a.declaredSize);
        show("a.image: " + a.image);
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_Assign_size_fail_noExprImage() throws Exception {
        String input = """
				image a <- @0;
				image [400, 500] b;
				b = a;
				b -> screen;
				""";
        Exception exception = assertThrows(PLPImageException.class, () -> {
            String[] args = {ImageResources.urlTower};
            genRun(input,args);
        });
        show(exception);
        keepFrames();
    }

    @Test
    public void loadImage_url_Assign_size_fail_dimNotMatch() throws Exception {
        String input = """
				image [500, 400] a;
				image [400, 500] b;
				b = a;
				b -> screen;
				""";
        Exception exception = assertThrows(PLPImageException.class, () -> {
            String[] args = {ImageResources.urlTower};
            genRun(input,args);
        });
        show(exception);
        keepFrames();
    }

    @Test
    public void loadImage_url_ImageIn_url() throws Exception {
        String input = """
				image a;
				a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.urlKanapaha};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
//		BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(fetchedBufferedImage, null);
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_ImageIn_file() throws Exception {
        String input = """
				image a;
				a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
//		BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(fetchedBufferedImage, null);
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_ImageIn_image() throws Exception {
        String input = """
				image a;
				a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
//		BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(fetchedBufferedImage, null);
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_ImageIn_url_resize() throws Exception {
        String input = """
				image [400, 500] a;
				a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_ImageIn_file_resize() throws Exception {
        String input = """
				image [400, 500] a;
				a <- @0;
				a -> screen;
				""";
        String[] args = {ImageResources.fileImage0};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void loadImage_url_ImageIn_image_resize() throws Exception {
        String input = """
				image [400, 500] a;
				image b <- @0;
				a <- b;
				a -> screen;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(resizedFetchedBufferedImage, new Dimension(400,500));
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void ImageToFile() throws Exception {
        String input = """
				image a <- @0;
				a -> @1;
				""";
        String[] args = {ImageResources.urlTower, "uflTower"};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
//		BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(fetchedBufferedImage, null);
        LoggedIO.PLPImageFile aFile = new LoggedIO.PLPImageFile(a, args[1]);
        expectedLog.add(aFile);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test void hashWidthHeight_1() throws Exception {
        String input = """
				image [400, 500] a <- @0;
				int b = a#width;
				int c = a#height;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(400);
        expectedLog.add(500);
        assertEquals(expectedLog, PLPImage.globalLog);
    }

    @Test void hashWidthHeight_2() throws Exception {
        String input = """
				image [400, 500] a;
				int b = a#width;
				int c = a#height;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(400);
        expectedLog.add(500);
        assertEquals(expectedLog, PLPImage.globalLog);
    }

    @Test void hashWidthHeight_3() throws Exception {
        String input = """
				image a <- @0;
				int b = a#width;
				int c = a#height;
				""";
        String[] args = {ImageResources.urlTower};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        BufferedImage fetchedBufferedImage = BufferedImageUtils.fetchBufferedImage(args[0]);
//		BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
        PLPImage a = new PLPImage(fetchedBufferedImage, null);
//		int b = a.getWidth();
//		int c = a.getHeight();
//		expectedLog.add(b);
//		expectedLog.add(c);
        expectedLog.add(a.getWidth());
        expectedLog.add(a.getHeight());
        assertEquals(expectedLog, PLPImage.globalLog);
    }

    @Test void hashRGB_Constructed() throws Exception {
        String input = """
				int pixel = <<@0, @1, @2>>;
				int r = pixel#red;
				int g = pixel#green;
				int b = pixel#blue;
				""";
        String[] args = {"1", "2", "3"};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1);
        expectedLog.add(2);
        expectedLog.add(3);
        assertEquals(expectedLog, PixelOps.globalLog);
    }

    @Test void hashWidthfail() throws Exception {
        String input = """
				image a;
				int b = a#width;
				""";
        Exception exception = assertThrows(PLPImageException.class, () -> {
            genRun(input);
        });
        show(exception);
        keepFrames();
    }

    @Test
    public void loopExampleFromDesc() throws Exception {
        String input = """
				image[400,500] a;
				a = *[X,Y]:X <= Y :RED;
				a -> screen;
				""";
        genRun(input);
        PLPImage a = new PLPImage(BufferedImageUtils.createBufferedImage(400, 500), new Dimension(400,500));
        a.ensureImageAllocated(0, 0);
        int w = a.getWidth();
        int h = a.getHeight();
        for (int X = 0; X < w; X++) {
            for (int Y = 0; Y < h; Y++) {
                if (X <= Y) {
                    a.updatePixel(X, Y, RED);
                }
            }
        }
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(a);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test void weave() throws Exception {
        String input = """
				//Takes two images and creates a square image 
				//by cropping the first, scaling the second, 
				//and weaving them together in an checkerboard pattern.
				image source <- @0;
				//find min dimension
				int w = source#width;
				int h = source#height;
				int size = w <= h ? w : h;
				//get overlay image, scaling to square of needed size
				image[size,size] overlay <- @1;
				int xoffset = (w-size)/2;
				int yoffset = (h-size)/2;
				//copy to new square image, cropping while keeping the center part
				image[size,size] checkerboard;
				checkerboard = *[X,Y] :: source[X+xoffset,Y+yoffset];
				int a = 8;
				int b = a/2;
				checkerboard = *[X,Y]: (X%a < b &  Y%a < b) | (b <= X%a  & b <= Y%a)  : overlay[X,Y];
				checkerboard -> screen;
				""";
        String[] args = {ImageResources.urlKanapaha, ImageResources.urlTower};
        genRun(input, args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        PLPImage source = new PLPImage(BufferedImageUtils.fetchBufferedImage(args[0]), null);
        int w = source.getWidth();
        int h = source.getHeight();
        int size = w <=h ? w : h;
        PLPImage overlay = new PLPImage(resizeBufferedImage(BufferedImageUtils.fetchBufferedImage(args[1]), size, size), new Dimension(size,size));
        PLPImage checkerboard = new PLPImage(BufferedImageUtils.createBufferedImage(size, size), new Dimension(size,size));
        int xoffset = (w-size)/2;
        int yoffset = (h-size)/2;
        for (int X = 0; X < size; X++) {
            for (int Y = 0; Y < size; Y++) {
                checkerboard.updatePixel(X, Y, source.selectPixel(X+xoffset, Y+yoffset));
            }
        }
        int a = 8;
        int b = a/2;
        for (int X = 0; X < size; X++) {
            for (int Y = 0; Y < size; Y++) {
                if ((X%a < b &&  Y%a < b) || (b <= X%a  && b <= Y%a)) {
                    checkerboard.updatePixel(X, Y, overlay.selectPixel(X, Y));
                }
            }
        }
        expectedLog.add(checkerboard);
        assertEquals(expectedLog, LoggedIO.globalLog);
        keepFrames();
    }

    @Test
    public void failedTestCase0() throws Exception {
        String input = """
                image[500,600] b;
                image[500,600] c = b;
                """;
        Exception exception = assertThrows(PLPImageException.class, () -> {
            genRun(input);
        });
        show(exception);
        keepFrames();
    }

    @Test
    public void failedTestCase1() throws Exception {
        String input = """
                image a <- @0;
                image b <- @1;
                string isEqual = a==b ? "yes" : "no";
                isEqual -> screen;
                """;
//        String input = """
//                image a <- @0;
//                image b <- @1;
//                string isEqual = a==b ? "yes" : "no";
//                b -> screen;
//                """;
        String[] args = {ImageResources.fileImage0, ImageResources.fileImage0};
        genRun(input,args);
//        keepFrames();
        ArrayList<Object> expectedLog = new ArrayList<Object>();
//        BufferedImage fetchedBufferedImageA = BufferedImageUtils.fetchBufferedImage(args[0]);
//        BufferedImage fetchedBufferedImageB = BufferedImageUtils.fetchBufferedImage(args[1]);
//        BufferedImage resizedFetchedBufferedImage = resizeBufferedImage(fetchedBufferedImage, 400, 500);
//        PLPImage a = new PLPImage(fetchedBufferedImageA, null);
//        PLPImage b = new PLPImage(fetchedBufferedImageB, null);
//        expectedLog.add(a);
//        expectedLog.add(b);
        expectedLog.add("yes");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void failedTestCase2() throws Exception {
        String input = """
                image a <- @0;
                image b <- @1;
                string isEqual = a==b ? "yes" : "no";
                isEqual -> screen;
                """;
        String[] args = {ImageResources.fileImage0, ImageResources.fileImage1};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("no");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void failedTestCase3() throws Exception {
        String input = """
                image a <- @0;
                image b <- @1;
                string isEqual = a!=b ? "yes" : "no";
                isEqual -> screen;
                """;
        String[] args = {ImageResources.fileImage0, ImageResources.fileImage0};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("no");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void failedTestCase4() throws Exception {
        String input = """
                image a <- @0;
                image b <- @1;
                string isEqual = a!=b ? "yes" : "no";
                isEqual -> screen;
                """;
        String[] args = {ImageResources.fileImage0, ImageResources.fileImage1};
        genRun(input,args);
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("yes");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    /*****************************  test cases from hw5 ******************************************/
    @Test
    public void helloWorld() throws Exception {
        String className = "HelloWorld";
        String input = """
				string s = "Hello, World!";
				s -> screen;
				""";
        byte[] bytecode = genCode(input, className, false);
        String[] args = {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("Hello, World!");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void decVar_int() throws Exception {
        String className = "decVar_int";
        String input = """
				int s = 1024;
				s -> screen;
				""";
        byte[] bytecode = genCode(input, className, false);
        String[] args = {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void decVar_var() throws Exception {
        String className = "decVar_int";
        String input = """
				int a = 1024;
				int s = a;
				s -> screen;
				""";
        byte[] bytecode = genCode(input, className, false);
        String[] args = {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void commandLineArg_string0() throws Exception {
        String className = "commandLineArg_string0";
        String input = """
				string s;
				s = @0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {"Hello from the command line!"};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(args[0]);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void commandLineArg_string1() throws Exception {
        String className = "commandLineArg_string1";
        String input = """
				string s;
				s = @0 + @1;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {"Hello!", " World!"};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(args[0] + args[1]);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void commandLineArg_int0() throws Exception {
        String className = "commandLineArg_int0";
        String input = """
				int s;
				s = @0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {"1024"};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void commandLineArg_int1() throws Exception {
        String className = "commandLineArg_int1";
        String input = """
				int s;
				s = @0 + @1;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {"100", "200"};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(300);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_stringLit() throws Exception {
        String className = "statementAssign_stringLit";
        String input = """
				string s;
				s = "Hello!";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("Hello!");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_intLit() throws Exception {
        String className = "statementAssign_intLit";
        String input = """
				int s;
				s = 1024;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_var() throws Exception {
        String className = "statementAssign_var";
        String input = """
				int s;
				int a = 1024;
				s = a;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_const() throws Exception {
        String className = "statementAssign_const";
        String input = """
				int s;
				s = WHITE;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(0xffffffff);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_unary_PLUS() throws Exception {
        String className = "statementAssign_unary_PLUS";
        String input = """
				int s;
				int a = 1024;
				s = +a;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_unary_MINUS() throws Exception {
        String className = "statementAssign_unary_MINUS";
        String input = """
				int s;
				int a = 1024;
				s = -a;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(-1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_unary_EXCL() throws Exception {
        String className = "statementAssign_unary_EXCL";
        String input = """
				int s;
				s = !(3 == 4) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_binary_ADD_int() throws Exception {
        String className = "statementAssign_binary_ADD_int";
        String input = """
				int s;
				int a = 1024;
				int b = 2048;
				int c = 512;
				s = a + b + c;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(3584);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_binary_ADD_string() throws Exception {
        String className = "statementAssign_binary_ADD_string";
        String input = """
				string s;
				string a = "Hello ";
				string b = "World!";
				s = a + b;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("Hello World!");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_binary_MINUS() throws Exception {
        String className = "statementAssign_binary_MINUS";
        String input = """
				int s;
				int a = 1024;
				int b = 2048;
				s = a - b;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(-1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_binary_Star() throws Exception {
        String className = "statementAssign_binary_Star";
        String input = """
				int s;
				int a = 1024;
				int b = 2;
				int c = 10;
				s = c + a * b;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(2058);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_binary_DIV() throws Exception {
        String className = "statementAssign_binary_DIV";
        String input = """
				int s;
				int a = 2048;
				int b = 2;
				s = a / b;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1024);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_binary_MOD() throws Exception {
        String className = "statementAssign_binary_MOD";
        String input = """
				int s;
				int a = 3;
				int b = 2;
				s = a % b;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_EQ_int() throws Exception {
        String className = "statementAssign_conditional_EQ_int";
        String input = """
				int s;
				int a = 3;
				int b = 3;
				s = (a == b) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_EQ_string() throws Exception {
        String className = "statementAssign_conditional_EQ_string";
        String input = """
				int s;
				string a = "hello";
				string b = "hello";
				s = (a == b) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_EQ_boolean() throws Exception {
        String className = "statementAssign_conditional_EQ_boolean";
        String input = """
				int s;
				string a = "hello";
				int b = 1024;
				string c = "hello";
				int d = 1024;
				s = ((a==c) == (b==d)) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(1);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_NEQ_int() throws Exception {
        String className = "statementAssign_conditional_NEQ_int";
        String input = """
				int s;
				int a = 3;
				int b = 3;
				s = (a != b) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(0);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_NEQ_string() throws Exception {
        String className = "statementAssign_conditional_NEQ_string";
        String input = """
				int s;
				string a = "hello";
				string b = "hello";
				s = (a != b) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(0);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_NEQ_boolean() throws Exception {
        String className = "statementAssign_conditional_NEQ_boolean";
        String input = """
				int s;
				string a = "hello";
				int b = 1024;
				string c = "hello";
				int d = 1024;
				s = ((a==c) != (b==d)) ? 1 : 0;
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add(0);
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_LT_int() throws Exception {
        String className = "statementAssign_conditional_LT_int";
        String input = """
				string s;
				int a = 3;
				int b = 34;
				s = (a < b) ? "a > b" : "a <= b";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("a > b");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_GT_int() throws Exception {
        String className = "statementAssign_conditional_GT_int";
        String input = """
				string s;
				int a = 3;
				int b = 34;
				s = (a > b) ? "a > b" : "a <= b";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("a <= b");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_LE_int() throws Exception {
        String className = "statementAssign_conditional_LE_int";
        String input = """
				string s;
				int a = 34;
				int b = 34;
				s = (a <= b) ? "a <= b" : "a > b";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("a <= b");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_GE_int() throws Exception {
        String className = "statementAssign_conditional_GE_int";
        String input = """
				string s;
				int a = 34;
				int b = 34;
				s = (a >= b) ? "a >= b" : "a < b";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("a >= b");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_AND() throws Exception {
        String className = "statementAssign_conditional_AND";
        String input = """
				string s;
				int a = 34;
				int b = 34;
				string c = "hello";
				string d = "world";
				s = (a >= b) & c != d ? "True" : "False";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("True");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }

    @Test
    public void statementAssign_conditional_OR() throws Exception {
        String className = "statementAssign_conditional_OR";
        String input = """
				string s;
				int a = 34;
				int b = 34;
				string c = "hello";
				string d = "world";
				s = (a >= b) | c == d ? "True" : "False";
				s -> screen;
				""";

        byte[] bytecode = genCode(input, className, false);
        String[] args =  {};
        runCode(className, bytecode, args);
        //set up expected log
        ArrayList<Object> expectedLog = new ArrayList<Object>();
        expectedLog.add("True");
        assertEquals(expectedLog, LoggedIO.globalLog);
    }
}

